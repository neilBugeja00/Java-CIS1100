\documentclass[a4paper]{article} 
\input{head}
\usepackage{graphicx}
\userpackage{listings}
\begin{document}
\graphicspath{{home/Neil/Computing and business/Year 1/Semester 1/Java-CIS1100/Documentation/Images}}

%-------------------------------
%	TITLE SECTION
%-------------------------------

\fancyhead[C]{}
\hrule \medskip % Upper rule
\begin{minipage}{0.295\textwidth} 
\raggedright
\footnotesize
NEIL BUGEJA\hfill\\   
51000L\hfill\\
\end{minipage}
\begin{minipage}{0.4\textwidth} 
\centering 
\large 
JAVA ASSIGNMENT\\ 
\normalsize 
Machine Learning 1, 17/18\\ 
\end{minipage}
\begin{minipage}{0.295\textwidth} 
\raggedleft
\today\hfill\\
\end{minipage}
\medskip\hrule 
\bigskip

%-------------------------------
%	CONTENTS
%-------------------------------
\section{AnyClass class}
AnyClass is declared to only contain the integer seqNo. Getters and setters are created in order to retrieve and set said seqNo. As per the assignment specifications, three polymorphic methods were created. The first is method String getData(), which simply returns the value of seqNo. The second method is String getKey(), and seeing how seqNo is to be returned as a string, String.valueof() was used to fulfil this requirement. Finally, it was stated that for AnyClass, the method edit() should be left empty.
\bigskip

\section{Node.java}
Class Node.java has two constructors, one which only consists of 'AnyClass data' and another which adds 'Node next' to the first.Two methods were created called 'getNext()' and 'setNext()'. These getters and setters are vital in the below class 'CQueue.java' as they will set the structure for the queue. Another two methods 'AnyClass getData()' and 'void setData(AnyClass data)' are declared. These methods are used to both get and set the data inside the nodes. Finally, a method show is created to print the data inside the node.
\bigskip

\section{Heterogeneous Circular Queue - CQueue.java}
\bigskip

\subsection{Construction of CQueue}
In this section a circular queue of size 20 nodes must be created. An integer called 'CIRCULAR\_QUEUE\_SIZE' is created and given the value 20. This is done so that the queue's size is stored in one location and should it need to be changed this can easily be done. \\
\\Firstly, in the Node class, two methods were created called 'getNext' and 'setNext'. These getters and setters are used below to enable the program to both get and set the pointer of the node it is given.\\
\\Secondly, a for loop is created that repeats for 'CIRCULAR\_QUEUE\_SIZE' times. In every iteration of this loop a new node is created with value null. To create this new node a method 'addNode' is created.\\
'addNode' will first check whether the root is null or not. If the root is indead null, this means that the node to be implemented is the first and therefore must be classified as being the root. However, if this is not the case, the root's next will change to point towards the current node, and the current node's next will change to point towards the root. The loop will traverse the queue until it reaches the last node, guaranteeing that the queue will be circular.\\
\\The below diagram may help better illustrate what was explained above:
%Image:
\begin{figure}[H]
\centering
\includegraphics[scale=0.30]{Images/Insert.png}
\end{figure}
\bigskip


By the means of the addNode method, a circular queue is successfully created of size 'CIRCULAR\_QUEUE\_SIZE'.
\bigskip

\subsection{Method boolean put(AnyClass newObj)}
This method makes use of the same principles and ideas used to create the queue itself. Firstly, in the node class two methods are created which will be used to get data from a node and set data to a node.
\\Secondly, in the CQueue class, the method '\emph{put}' is created. Like the method '\emph{addNode}', it will first check if the root of the queue is null. If this is the case, the root is simply filled with data by using the setter. However, if the root is not null the program will traverse the queue as it has done in the previous method to create the nodes, but this time while it is visiting a node it will set data into it.\\
\\If neither of these cases are met the method will return false, indicating that the queue is full.
\bigskip

\subsection{AnyClass serve()}
This method will first check whether or not the queue is empty. If the queue is empty it simply only returns that there is no content available. Otherwise, the method will grab the first object and give it the value of the one next to it. This process will repeat until the entire queue has been through this process. After this has been done, the object which was previously second in the queue is now the root.The image below will help illustrate the explanation given.
\begin{figure}[htp]
\centering
\includegraphics[scale=0.30]{Images/serve.png}
\end{figure}
\bigskip

\subsection{void listAll()}
To list all the data in the circular queue, this method will traverse the queue by the same method that it has been doing previosly. The only difference is that every time a node filled with data is encountered, the data is acquired and outputted for the user to see. By the end of the method all the data in the queue will be displayed.\\
\bigskip

\subsection{AnyClass editObject(String key)}
This method will once again begin by traversing the entire queue. If it encounters an array with data it will check to see if it matches with the key given. If this is the case, the key's data is acquired and used in the method \emph{'edit'} found in Employee.java. 

\subsection{void changePayOfAll(int percent)}
This method traverses the entire queue and in each instance where data is encountered, the object is passed through to the method editAll(int percentage). This method is declared in the 'AnyClass' class and is later overridden in the 'Employee' class. In the 'Employee' class, the method 'editAll(int percentage)' will set the salary to a new salary. To calculate the new salary, the integer percentage must be transformed into a type double.
\bigskip

%------------------------------------------------

\section{Emplyee - Employee.java}

When declaring an employee, the following must be assigned:
\\
\\1. A number relating to the sequence number
\\2. The employee's surname
\\3. The employee's salary which is declared as a double.\\
\\The class has the appropriate getters and setters in place to get and set salary and get the employee's key which is the surname. A method is also created which retrieves the employee's data which includes his id number, surname(key), and salary.\\
\\Lastly, two methods are created. One is used to edit the employee's salary. This method will first display's the employee's current salary by means of the getter, and later set a new salary by means of a setter. The other method is the editAll() method which has been explained in the previous section.
\bigskip 

%------------------------------------------------
\section{PartTimer - PartTimer.java}
PartTimer extends employee as it is basically employee but with a few additions. A constructor for PartTimer is present as hours must also be declared in the case for a part time employee. The constructor makes use of supers as they are the same as employee.java. A method is present which retrieves the partTimer's hours and another method 'getData()' which overrides the method 'getData()' found in employee.java. This is important as without it the partTimer's hours cannot be viewed.
\bigskip

\section{Deliverables - Main.java}
The menu starts by first creating the CQueue which will be used to store both types of employees. Next the menu is displayed, giving the user a variety of options. Depending on the option chosen, a switch is present to employ the method corresponding with the user's request.\\
\\Below is a list of all options and an explanation on how they function:

\subsection{Populate Queue}
The queue must be populated with both full time and part time employees. Therefore, the method will first ask the user how many new full time employees have to be inserted. In the case of full time employees the sequence number, surname and salary are required. Next, the program will ask the user how much part time employees must be created. The same credentials as employee must be given along with the addition of hours worked. The employees are inserted into the queue by means of the "put" method developed earlier.

\subsection{List all objects in queue}
This method simply calls the method listAll() developed in the CQueue section of this program.

\subsection{Search for Employee}
To fulfil this requirement, first a method of type 'AnyClass' called 'listEmployee' was created in the CQueue class. This method requires a String 'key' and an int 'seqNo'. These variables are the variables that the user will input and used to search the queue with. With that said, the method will traverse the entire queue and search for an objects which matches the user's seqNo and key. Care was taken for the searching to not be case sensitive. Should an object with matching credentials be found, the method will output said object. Else nothing will happen.

\subsection{Update Payment of a single Employee}
To complete this task, the method editObject which was previously created is used. In this section, the method simply asks the user for the employee's surname(key) which needs to be edited, and said surname is inserted into the method editObject(). This method works fine, however should the queue contain two or more objects with the same surname, the user must edit all salary values. The same procedure used in 'Search for employee' where both sequence number and surname must be entered cannot be used as that would violate the requirements placed in the method editObject() in which only a String key must be entered in it's parameters.

\subsection{Update payment of all persons by percentage}
This method enters the user's chosen percentage change into the method 'changePayOfAll()' in which the necessary adjustments will be made to all employee's salaries. After this, the list of all employees along with their salaries is displayed, to show the user of all the changes made. This method will also work with negative numbers, should the user wish to decrease the employee's salary.

\subsection{Present and delete first item in queue (SERVE)}
This method is present to make use of the serve method developed earlier in the 'CQueue' class.

\bigskip
%------------------------------------------------
\section{Source Code}
\bigskip

\subsection{AnyClass class}
\begin{verbatim*}
package dataobjects;

public class AnyClass{

    public int seqNo;

    public AnyClass(int seqNo){
        this.seqNo = seqNo;
    }

    public int getSeqNo(){
        return seqNo;
    }

    public void setSeqNo(int seqNo){
        this.seqNo = seqNo;
    }

    public String getData(){
        return "Sequence number: "+seqNo;
    }

    public String getKey(){
        return String.valueOf(seqNo);
    }

    public void edit(){
    }

    public void editAll(int percentage){

    }

}
\end{verbatim*}


%------------------------------------------------

\end{document}
